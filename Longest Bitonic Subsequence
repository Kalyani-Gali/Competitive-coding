#include <bits/stdc++.h>
using namespace std;
int bitonic(int arr[], int n)
{
    int lis[n]; // Length of largest increasing subsequence ending at i
    int lds[n]; // Length of largest decreasing subsequence starting at i
    int ans = 0;

    /*
        For lis we check all elements left of i
    */
    for (int i = 0; i < n; i++)
    {
        lis[i] = 1;
        for (int j = 0; j < i; j++)
            if (arr[j] <= arr[i])
                lis[i] = max(lis[i], 1 + lis[j]);
    }

    /*
        for lds we check all elements right of i
    */

    for (int i = n – 1; i >= 0; i–)
    {
        lds[i] = 1;
        for (int j = n – 1; j > i; j–)
            if (arr[i] >= arr[j])
                lds[i] = max(lds[i], 1 + lds[j]);
    }

    /*
        Bitonic subsequence of any element i = lis[i] + lds[i] – 1
        -1 because element i is counted twice
    */
    for (int i = 0; i < n; i++)
    {
        ans = max(ans, lds[i] + lis[i] – 1);
    }
    return ans;
}
int main()
{
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    cout << bitonic(arr, n) << endl;
    return 0;
}
